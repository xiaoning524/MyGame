!function (e) {
    "undefined" == typeof module ? this.charming = e : module.exports = e
}(function (e, n) {
    "use strict";
    n = n || {};
    var t = n.tagName || "span", o = null != n.classPrefix ? n.classPrefix : "char", r = 1, a = function (e) {
        for (var n = e.parentNode, a = e.nodeValue, c = a.length, l = -1; ++l < c;) {
            var d = document.createElement(t);
            o && (d.className = o + r, r++), d.appendChild(document.createTextNode(a[l])), n.insertBefore(d, e)
        }
        n.removeChild(e)
    };
    return function c(e) {
        for (var n = [].slice.call(e.childNodes), t = n.length, o = -1; ++o < t;)c(n[o]);
        e.nodeType === Node.TEXT_NODE && a(e)
    }(e), e
});
{
    const effects = [
        {
            options: {
                shapeColors: ['#FD74FF','#3771FC','#7C5CE4','#542A95','#ACC7FE'],
                shapeTypes: ['rect','polygon'],
                totalShapes: 1
            },
            hide: {
                lettersAnimationOpts: {
                    duration: () => anime.random(800,1000),
                    delay: () => anime.random(0,80),
                    easing: 'easeInOutExpo',
                    opacity: 0,
                    translateY: '300%',
                    rotateZ: () => anime.random(-50,50)
                },
                shapesAnimationOpts: {
                    duration: 350,
                    easing: 'easeOutExpo',
                    translateX: t => [t.dataset.tx,anime.random(-25,25)],
                    translateY: t => [t.dataset.ty,anime.random(-25,25)],
                    scale: 1,
                    rotate: 0,
                    opacity: {
                        value: 0,
                        duration: 200,
                        easing: 'linear'
                    }
                }
            },
            show: {
                lettersAnimationOpts: {
                    duration: 800,
                    delay: () => anime.random(0,75),
                    easing: 'easeInOutExpo',
                    opacity: [0,1],
                    translateY: ['-300%','0%'],
                    rotate: () => [anime.random(-50,50), 0]
                },
                shapesAnimationOpts: {
                    duration: 2000,
                    easing: 'easeOutExpo',
                    translateY: t => {
                        const ty = anime.random(-300,300);
                        t.dataset.ty = ty;
                        return [anime.random(-25,25),ty];
                    },
                    scale: t => {
                        const s = randomBetween(1.5,2);
                        t.dataset.s = s;
                        return [s,s];
                    },
                    rotate: () => anime.random(-45,45),
                    opacity: {
                        value: [0,0.9],
                        duration: 600,
                        delay: 300,
                        easing: 'linear'
                    }
                }
            }
        }
    ];
    class Slideshow {
        constructor(el) {
            this.DOM = {};
            this.DOM.el = el;
            this.DOM.slides = Array.from(this.DOM.el.querySelectorAll('.slide'));
            this.DOM.bgs = Array.from(this.DOM.el.querySelectorAll('.slide__bg'));
            this.DOM.words = Array.from(this.DOM.el.querySelectorAll('.word'));
            this.slidesTotal = this.DOM.slides.length;
            this.current = 0;
            this.words = [];
            this.DOM.words.forEach((word, pos) => {
                this.words.push(new Word(word, effects[pos].options));
            });
            this.isAnimating = true;
            this.words[this.current].show(effects[this.current].show).then(() => this.isAnimating = false);
        }
        show(direction) {
            if ( this.isAnimating ) return;
            this.isAnimating = true;
            let newPos;
            let currentPos = this.current;
            this.DOM.slides[newPos].style.opacity = 1;
            this.DOM.bgs[newPos].style.transform = 'none';
            anime({
                targets: this.DOM.bgs[currentPos],
                duration: 600,
                easing: [0.2,1,0.3,1],
                translateY: ['0%', direction === 'next' ? '-100%' : '100%'],
                complete: () => { this.DOM.slides[currentPos].classList.remove('slide--current');this.DOM.slides[currentPos].style.opacity = 0;this.DOM.slides[newPos].classList.add('slide--current');this.words[newPos].show(effects[newPos].show).then(() => this.isAnimating = false); }
            });
            this.words[newPos].hide(); this.words[this.current].hide(effects[currentPos].hide).then(() => { this.current = newPos; });
        }
    }
    const slideshow = new Slideshow(document.querySelector('.slideshow'));
}